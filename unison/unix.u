{-
    BasicIO
    =========
-}

unique ability BasicIO
    where
        echo: Text -> ()

basicIO : Request {BasicIO} a ->{IO, Exception} a
basicIO result =
    match result with
        { echo text -> resume } -> putText stdOut text; handle resume () with basicIO
        { result } -> result


{-
    Status
    =========
-}

unique type Empty = 

-- The unix exit command that allows you to exit with error code
unique ability Status
       where
            exit: Nat -> Empty

-- handles the exit command which just returns an integer
exitHandler : Request {g, Status} a -> Nat
exitHandler request =
    match request with
          { result } -> 0
          { exit v -> resume } -> v

{-
Userspace
==========

This handles the hard coded users and their environments.
It allows for whoami and su commands to be run.

-}

-- The users (hard coded)
unique type User = Username Text

unique ability Session
    where
        su: Text -> ()
        ask: Text -> Text
        setvar: Text -> Text -> ()
        adduser: Text -> ()

whoami: '{Session} Text
whoami _ = ask "USER"

env: User -> Request {Session} a ->{Error, State [(User, [(Text, Text)])]} a
env user request = 
    match request with
        {result} -> result

        { ask var -> resume } -> 
           let st = get ()
               envs = lookupEnvs user st
               val = lookupEnvVar var envs
               handle resume val with env user

        {su user' -> resume} -> 
            if userExists (Username user') (get ()) then
                handle resume () with env (Username user')
            else
                throw NoSuchUser
                handle resume () with env user   -- fail

        {setvar var val -> resume} -> 
            let st = get ()
                envs = lookupEnvs user st
                envs' = modifyEnvVar var val envs
                put (modifyEnvs user envs' st) 
                handle resume () with env user

        {adduser user' -> resume} ->
            let st = get ()
                newuser = (Username user')
                newvars = [("USER", user')]
                newenv = modifyEnvs newuser newvars st
                if not (userExists newuser st) then
                    put newenv
                    handle resume () with env newuser
                else 
                    throw UserExists
                    handle resume () with env user

lookupEnvVar: Text -> [(Text, Text)] -> Text
lookupEnvVar var env =
    match env with
        [] -> ""
        (var', val) +: rest ->
            if var == var' then val
            else lookupEnvVar var rest

modifyEnvVar: Text -> Text -> [(Text, Text)] -> [(Text, Text)]
modifyEnvVar var val env =
    match env with
        [] -> [(var, val)]
        (var', val') +: rest ->
            if var == var' then (var, val) +: rest
            else (var', val') +: modifyEnvVar var val rest

lookupEnvs: User -> [(User, [(Text, Text)])] -> [(Text, Text)]
lookupEnvs user envs =
    match envs with
        [] -> []
        (user', env) +: rest ->
            if userToText user == userToText user' then env
            else lookupEnvs user rest

modifyEnvs: User -> [(Text, Text)] -> [(User, [(Text, Text)])] -> [(User, [(Text, Text)])]
modifyEnvs user env envs =
    match envs with
        [] -> [(user, env)]
        (user', env') +: rest ->
            if userToText user == userToText user' then (user, env) +: rest
            else (user', env') +: modifyEnvs user env rest

userExists: User -> [(User, [(Text, Text)])] -> Boolean
userExists user envs =
    match envs with
        [] -> false
        (user', env) +: rest ->
            if userToText user == userToText user' then true
            else userExists user rest

userToText: User -> Text
userToText user = 
    let (Username username) = user
        username

initialUserspace : [(User, [(Text, Text)])]
initialUserspace = [(Username "root", [("USER", "root")] )]

{-
      Time Sharing
   ==================
-}

unique ability Interrupt
    where
        interrupt: {Interrupt } ()


unique type PState a e = Done a | Paused ('{e} PState a e)

interruptWrite : Request {e, BasicIO} x ->{e, Co, BasicIO} ()
interruptWrite result =
    match result with
        { echo text -> resume } -> 
            uinterrupt
            echo text 
            handle resume () with interruptWrite
        { result } -> ()

reifyProcess : Request {Interrupt, e} a -> PState a e
reifyProcess request =
    match request with
        { interrupt -> resume } -> Paused (_ -> handle !resume with reifyProcess )
        { result } -> Done result

unique ability TimeSharing
    where
        fork: {TimeSharing } Boolean

-- handler for time sharing ability
nondet : Request {TimeSharing} a -> [a]
nondet request =
    match request with
        { fork -> resume } -> (handle resume true with nondet) lib.base.data.List.++ (handle resume false with nondet)
        { result } -> [result]

sched : [PState a {e, TimeSharing}] -> [a] ->{e} [a]
sched ps done = 
    match ps with
        [] -> done
        (Done res) +: ps' -> sched ps' (res lib.base.data.List.+: done)
        (Paused m) +: ps' -> sched (ps' lib.base.data.List.++ (handle !m with nondet)) done

timeshare : '{g, Interrupt, TimeSharing} o ->{g} [o]
timeshare m = sched [Paused (_ -> handle !m with reifyProcess)] []

{-
  Serial File System
  ==================
-}

unique ability State a
       where
            put: a -> ()
            get: () -> a

runState : a -> Request {State a} b -> b
runState v request =
    match request with
        { put v' -> resume } -> handle resume () with runState v'
        { get () -> resume } -> handle resume v with runState v
        { result } -> result

unique type DirectoryT = Directory (Text, Nat)
unique type DataRegionT = DataRegion (Nat, Text)
unique type INodeT = INode Nat Nat
unique type IListT = IList (Nat, INodeT)
unique type FileSystemT = FileSystem (List DirectoryT) (List IListT) (List DataRegionT) Nat Nat


initialINode : INodeT
initialINode = INode 0 0

initialDirectory : DirectoryT
initialDirectory = (Directory ("stdout", 0))


initialDataRegion : DataRegionT
initialDataRegion = DataRegion (0, "")

initialIList : IListT
initialIList = IList (0, initialINode)

initialFileSystem : FileSystemT
initialFileSystem = FileSystem [initialDirectory] [initialIList] [initialDataRegion] 0 0

lookupINode : Nat -> [IListT] -> Either INodeT ()
lookupINode i ilists =
    match ilists with
        [] -> Right ()
        (IList (i', inode)) +: rest ->
            if i == i' then Left inode
            else lookupINode i rest

lookupFName : Text -> [DirectoryT] -> Either Nat ()
lookupFName name directories =
    match directories with
        [] -> Right ()
        (Directory (name', i)) +: rest ->
            if name == name' then Left i
            else lookupFName name rest

modifyINode : Nat -> INodeT -> [IListT] -> [IListT]
modifyINode i inode ilists =
    match ilists with
        [] -> []
        (IList (i', inode')) +: rest ->
            if i == i' then (IList (i, inode)) +: rest
            else (IList (i', inode')) +: modifyINode i inode rest

lookupDataRegion : Nat -> [DataRegionT] -> Either Text ()
lookupDataRegion i dataRegions =
    match dataRegions with
        [] -> Right ()
        (DataRegion (i', text)) +: rest ->
            if i == i' then Left text
            else lookupDataRegion i rest

modifyDataRegion : Nat -> Text -> [DataRegionT] -> [DataRegionT]
modifyDataRegion i text dataRegions =
    match dataRegions with
        [] -> []
        (DataRegion (i', text')) +: rest ->
            if i == i' then (DataRegion (i, (text' ++ text))) +: rest
            else (DataRegion (i', text')) +: modifyDataRegion i text rest

-- fread, implementation of system read
fread : Nat -> FileSystemT -> Either Text ()
fread i fs =
    match fs with
        FileSystem directories ilists dataRegions _ _ ->
            match lookupINode i ilists with
                Left inode ->
                    match inode with
                        INode _ dataRegion ->
                            match lookupDataRegion dataRegion dataRegions with
                                Left text -> Left text
                                Right () -> Right ()
                Right () -> Right ()

-- fwrite, writes to the file system at the given inode with the given text
fwrite : Nat -> Text -> FileSystemT -> FileSystemT
fwrite i text fs =
    match fs with
        FileSystem directories ilists dataRegions _ _ ->
            match lookupINode i ilists with
                Left inode ->
                    match inode with
                        INode _ dataRegion ->
                            FileSystem directories (modifyINode i (INode i dataRegion) ilists) (modifyDataRegion dataRegion text dataRegions) 0 0
                Right () -> fs

unique ability FileRW
         where
                read: Nat -> {FileRW } Text
                write: (Nat, Text) -> {FileRW } ()

fileRW : Request {FileRW} a ->{State FileSystemT, Error} a
fileRW result =
    match result with
        { read i -> resume } ->
            let fs = get ()
                text = fread i fs
                match text with
                    Left text -> handle resume text with fileRW
                    Right () -> 
                        throw FileNotFound
                        handle resume "" with fileRW
        { write (i, text) -> resume } ->
            let fs = get ()
                fs' = fwrite i text fs
                put fs'
                handle resume () with fileRW
        { result } -> result


fileEcho: Request {BasicIO} a ->{State FileSystemT} a
fileEcho m = match m with 
    { echo text -> resume } -> 
        let fs = get ()
            put (fwrite 0 text fs)
            handle resume () with fileEcho
    { result } -> result


fopen : Text -> FileSystemT ->{Error} Nat
fopen name fs = 
    match fs with
        FileSystem directories ilists dataRegions dnext inext ->
            match lookupFName name directories with
                Left i -> i
                Right () -> 
                    throw FileNotFound
                    inext

has : Text -> [DirectoryT] -> Boolean
has name directories =
    match directories with
        [] -> false
        (Directory (name', i)) +: rest ->
            if name == name' then true
            else has name rest

fcreate : Text -> FileSystemT -> (Nat, FileSystemT)
fcreate name fs = 
    match fs with 
        FileSystem directories ilists dataRegions dnext inext ->
            -- file already exists, overwrite it
            if has name directories then 
                let ino = (fopen name fs)
                    inode = lookupINode ino ilists
                    match inode with
                        Left inode -> 
                            match inode with 
                                INode ino loc ->
                                    let dreg' = modifyDataRegion loc "" dataRegions
                                        (ino , FileSystem directories ilists dreg' dnext inext)
                        Right () -> (ino, fs) -- unreacable
            else 
                let inext' = inext + 1
                    dnext' = dnext + 1
                    inode = INode inext dnext
                    ilists' = (IList (inext, inode)) +: ilists
                    directories' = (Directory (name, inext)) +: directories
                    (inext, FileSystem directories' ilists' dataRegions dnext' inext')

unique ability FileCO
    where
        create: Text -> Nat
        open: Text -> Nat

fileCO : Request {FileCO} a ->{FileRW, State FileSystemT, Error} a
fileCO result =
    match result with
        { create name -> resume } ->
            let fs = get ()
                (ino, fs') = fcreate name fs
                put fs'
                handle resume ino with fileCO
        { open name -> resume } ->
            let fs = get ()
                ino = fopen name fs
                put fs
                handle resume ino with fileCO
        { result } -> result

flink: Text -> Text -> FileSystemT ->{Error} FileSystemT
flink src dest fs =
    match fs with
        FileSystem directories ilists dataRegions dnext inext ->
            if has dest directories then
               fs -- error, file exists
            else
                let ino = lookupFName src directories
                    match ino with
                        Left ino ->
                            let directories' = (Directory (dest, ino)) +: directories
                                inode = lookupINode ino ilists
                                match inode with
                                    Left inode ->
                                        match inode with
                                            INode ino loc ->
                                                  let loc' = loc + 1
                                                      inode' = INode ino loc'
                                                      ilists' = modifyINode ino inode' ilists
                                                      FileSystem directories' ilists' dataRegions dnext inext
                                    Right () -> 
                                        throw FileExists
                                        fs -- unreachable, we know the file exists
                        Right () -> 
                            throw FileNotFound
                            fs -- no such file src

removeINode : Nat -> [IListT] -> [IListT]
removeINode i ilists =
    match ilists with
        [] -> []
        (IList (i', inode)) +: rest ->
            if i == i' then rest
            else (IList (i', inode)) +: removeINode i rest

removeDataRegion : Nat -> [DataRegionT] -> [DataRegionT]
removeDataRegion i dataRegions =
    match dataRegions with
        [] -> []
        (DataRegion (i', text)) +: rest ->
            if i == i' then rest
            else (DataRegion (i', text)) +: removeDataRegion i rest

removeDirectory : Text -> [DirectoryT] -> [DirectoryT]
removeDirectory name directories =
    match directories with
        [] -> []
        (Directory (name', i)) +: rest ->
            if name == name' then rest
            else (Directory (name', i)) +: removeDirectory name rest

funlink: Text -> FileSystemT -> FileSystemT
funlink name fs =
    match fs with
        FileSystem directories ilists dataRegions dnext inext ->
            if has name directories then
                let ino = lookupFName name directories
                    match ino with
                        Left ino ->
                             let directories' = removeDirectory name directories
                                 inode = lookupINode ino ilists
                                 match inode with
                                        Left inode ->
                                            match inode with
                                                INode ino loc ->
                                                    if loc > 1 then
                                                        let loc' = loc - 1
                                                            inode' = INode ino loc'
                                                            ilists' = modifyINode ino inode' ilists
                                                            FileSystem directories' ilists' dataRegions dnext inext
                                                    else
                                                        let ilists' = removeINode ino ilists
                                                            dataRegions' = removeDataRegion loc dataRegions
                                                            FileSystem directories' ilists' dataRegions' dnext inext
                                        Right () -> fs -- unreachable, we know the file exists
                        Right () -> fs -- no such file src
            else
                fs -- no such file


unique ability FileLU
       where
            link: (Text, Text) -> {FileLU } ()
            unlink: Text -> {FileLU } ()

fileLU : Request {FileLU} a ->{FileRW, State FileSystemT, Error} a
fileLU result =
    match result with
        { link (src, dest) -> resume } ->
            let fs = get ()
                fs' = flink src dest fs
                put fs'
                handle resume () with fileLU
        { unlink name -> resume } ->
            let fs = get ()
                fs' = funlink name fs
                put fs'
                handle resume () with fileLU
        { result } -> result

fileIO m = handle (handle (handle !m with fileRW) with fileCO) with fileLU


{-
    pipes
    ======
-}

unique ability Await a
    where
        await: () -> a

unique ability Yield b
    where
        yield: b -> ()

pipe : ('{Yield b, e} a) -> ('{Await b, e} a) ->{e} a
pipe p c = handle c () with
                (cases
                    { x } -> x
                    { await () -> resume } -> copipe (resume) p)

copipe : (b -> {Await b, e} a) -> ('{Yield b, e} a) ->{e} a
copipe c p = handle p () with
                (cases
                    { x } -> x
                    { yield y -> resume } -> pipe resume '(c y) )

{-
    Process Syncronization
    ======================
-}

unique ability Co 
    where 
        ufork: Nat
        wait: Nat -> ()
        uinterrupt: ()
        nice: Nat -> Int
        renice: Nat -> Int -> ()

unique type Proc a e = Proc (Sstate a e ->{e} List (Nat, a))
unique type Pstate a e = Ready (Proc a e) | Blocked Nat (Proc a e)
unique type Sstate a e = {q: List (Nat, Pstate a e), done: List (Nat, a), pid: Nat, pnext: Nat}

runNext: Sstate a e ->{e} List (Nat, a)
runNext st =
    let (Sstate q done pid pnext) = st
        match q with
            [] -> done
            (pid', Blocked pid'' resume) +: q' -> 
                runNext (Sstate (q' lib.base.data.List.++ [(pid', Blocked pid'' resume)]) done pid pnext)
            (pid', Ready resume) +: q' -> 
                let st' = (Sstate q' done pid' pnext)
                    Proc (resume') = resume
                    resume' st'

modifyQueue: Nat -> [(Nat, Pstate a e)] -> [(Nat, Pstate a e)]
modifyQueue pid q =
    match q with
        [] -> []
        (pid', pstate) +: rest ->
            if pid == pid' then rest
            else (pid', pstate) +: modifyQueue pid rest

lookupNice: Nat -> [(Nat, Int)] -> Int
lookupNice pid prio =
    match prio with 
        [] -> -1 -- maybe warn here
        (pid', renice) +: rest ->
            if pid' == pid then
                renice 
            else 
                lookupNice pid rest 

modifyNice: Nat -> Int -> [(Nat, Int)] -> [(Nat, Int)]
modifyNice pid renice prio =
    match prio with
        [] -> [(pid, renice)]
        (pid', renice') +: rest ->
            if pid' == pid then
                (pid, renice) +: rest
            else 
                (pid', renice') +: modifyNice pid renice rest

lowestNiceInQueue: [(Nat, Int)] -> [(Nat, Pstate a e)] -> Either (Nat, Pstate a e) ()
lowestNiceInQueue niceValues q = 
    match q with 
        [] -> Right ()
        (pid, Blocked pid' resume) +: rest -> 
            lowestNiceInQueue niceValues rest
        (pid, Ready resume) +: rest ->
            let nextnice = lookupNice pid niceValues
                match lowestNiceInQueue niceValues rest with 
                    Left (pid', pstate) -> 
                        let nextnice' = lookupNice pid' niceValues
                            if nextnice < nextnice' then 
                                Left (pid, Ready resume)
                            else 
                                Left (pid', pstate)
                    Right () -> 
                        Left (pid, Ready resume)

runNextNice: Sstate a e -> [(Nat, Int)] ->{e} List (Nat, a)
runNextNice st niceValues = 
    let (Sstate q done pid pnext) = st
        match q with
            [] -> done
            (pid', Blocked pid'' resume) +: q' -> 
                runNextNice (Sstate (q' lib.base.data.List.++ [(pid', Blocked pid'' resume)]) done pid pnext) niceValues
            (pid', Ready resume) +: q' ->
                match lowestNiceInQueue niceValues q with
                    Left (pid', Ready resume) -> 
                        let st' = (Sstate q' done pid' pnext)
                            Proc (resume') = resume
                            resume' st'
                    Left (pid', Blocked pid'' resume) ->             -- unreachable
                        let st' = (Sstate q' done pid' pnext)
                            Proc (resume') = resume
                            resume' st'
                    Right () -> 
                        let st' = (Sstate q' done pid' pnext)
                            Proc (resume') = resume
                            resume' st'

minNice : Int
minNice = -20

schedAging: Sstate a e -> Request {Co, e} a ->{e, State [(Nat, Int)]} List (Nat, a)
schedAging st request = match request with
    {result} ->
        let (Sstate q done pid pnext) = st
            done' = done lib.base.data.List.++ [(pid, result)]
            runNextNice (Sstate q done' pid pnext) !get
    { ufork -> resume } ->
        let resume' = (Proc (st -> handle resume 0 with scheduler st))
            (Sstate q done pid pnext) = st
            nicevalue = lookupNice pid !get

            -- simple heuristic to avoid starvation, switch back to round robin if we reach min nice
            if nicevalue - +1 <= minNice then
                let q' = q lib.base.data.List.++ [(pid, Ready resume')]
                    pid' = pnext
                    pnext' = pnext + 1
                    handle resume pid' with scheduler (Sstate q' done pid pnext')
            else
                put (modifyNice pnext nicevalue !get)
                put (modifyNice pnext (nicevalue - +1) !get)

                pid' = pnext
                pnext' = pnext + 1

                q' = q lib.base.data.List.++ [(pid', Ready resume')]
                handle resume pid' with schedAging (Sstate q' done pid pnext)

    { nice pid -> resume } ->
        let (Sstate q done pid pnext) = st
            nicevalue = lookupNice pid !get
            handle resume nicevalue with schedAging st

    { renice pid newNice -> resume} -> 
        let resume' = (Proc (st -> handle resume () with scheduler st))
            (Sstate q done pid pnext) = st
            put (modifyNice pid newNice !get)
            runNextNice (Sstate q done pid pnext) !get
    
    { wait pid -> resume } ->
        let resume' = (Proc (st -> handle resume () with scheduler st))
            (Sstate q done pid pnext) = st
            q' = if processExists pid q then
                     q lib.base.data.List.++ [(pid, Blocked pid resume')]
                 else q lib.base.data.List.++ [(pid, Ready resume')]
            runNextNice (Sstate q' done pid pnext) !get
    { uinterrupt -> resume } ->
        let resume' = (Proc (st -> handle resume () with scheduler st))
            (Sstate q done pid pnext) = st
            q' = q lib.base.data.List.++ [(pid, Ready resume')]
            runNextNice (Sstate q' done pid pnext) !get

scheduler: Sstate a e -> Request {Co, e} a ->{e} List (Nat, a)
scheduler st request = match request with 
    { result } -> 
        let (Sstate q done pid pnext) = st 
            done' = done lib.base.data.List.++ [(pid, result)]
            runNext (Sstate q done' pid pnext)
    { ufork -> resume } -> 
        let resume' = (Proc (st -> handle resume 0 with scheduler st))
            (Sstate q done pid pnext) = st
            pid' = pnext
            pnext' = pnext + 1
            q' = q lib.base.data.List.++ [(pid', Ready resume')]
            handle resume pid' with scheduler (Sstate q' done pid pnext')
    { wait pid -> resume } -> 
        let resume' = (Proc (st -> handle resume () with scheduler st))
            (Sstate q done pid pnext) = st
            q' = if processExists pid q then
                     q lib.base.data.List.++ [(pid, Blocked pid resume')]
                 else q lib.base.data.List.++ [(pid, Ready resume')]
            runNext (Sstate q' done pid pnext)

    { nice pid -> resume } ->
        handle resume +0 with scheduler st

    {renice pid newNice -> resume} -> 
        handle resume () with scheduler st
        
    { uinterrupt -> resume } -> 
        let resume' = (Proc (st -> handle resume () with scheduler st))
            (Sstate q done pid pnext) = st
            q' = q lib.base.data.List.++ [(pid, Ready resume')]
            runNext (Sstate q' done pid pnext)

processExists: Nat -> [(Nat, Pstate a e)] -> Boolean
processExists pid processes =
    match processes with
        [] -> false
        (pid', process) +: rest ->
            if pid == pid' then true
            else processExists pid rest

timeshare2 : '{g, Co} a ->{g} List (Nat, a)
timeshare2 m = handle !m with scheduler (Sstate [] [] 1 2)

init: '{e} a ->{e, Co} ()
init main = let pid = ufork
                if pid == 0 then
                    let a = main ()
                        ()
                else
                    wait pid

{-
    Permissions
    ============
-}

unique type Permission = Read | Write | AddUser | Grant | Revoke | Execute

all : [Permission]
all = [Read, Write, AddUser, Grant, Revoke, Execute]

unique ability Permit 
    where 
        grant: Text -> Permission -> ()
        revoke: Text -> Permission -> ()

checkPermission : User -> Permission -> [(Text, [Permission])] ->{e, Error, IO, Exception} ()
checkPermission user required perms =
    match perms with
        [] -> throw PermissionDenied
        (user', perms') +: rest ->
            if userToText user == user' then
                if allowed required perms' then
                    ()
                else
                    throw PermissionDenied
            else checkPermission user required rest

permissions: User -> Request {e, Permit, Session, FileRW, FileLU, FileCO, Co} a ->{e, Session, FileRW, FileLU, FileCO, Co, Error, State [(Text, [Permission])], IO, Exception} a
permissions user request = 
    match request with
        -- Permissions 
        {grant user' perm -> resume} -> 
            checkPermission user Grant !get
            existingPerms = lookupPermission user' !get 
            newPerms = perm +: existingPerms
            put (modifyPermission user' newPerms !get)
            handle resume () with permissions user
        
        {revoke user' perm -> resume} ->
            checkPermission user Revoke !get
            newPerms = removePermission perm (lookupPermission user' !get)
            put (modifyPermission user' newPerms !get)
            handle resume () with permissions user

        -- Users
        {ask var -> resume} -> 
            checkPermission user Read !get
            answer = ask var
            handle resume answer with permissions user 
        {su user' -> resume} -> 
            su user'
            handle resume () with permissions (Username user')
        {adduser user' -> resume} -> 
            checkPermission user AddUser !get
            adduser user'
            handle resume () with permissions user
        {setvar var val -> resume} -> 
            checkPermission user Write !get
            setvar var val
            handle resume () with permissions user

        -- Files
        {read i -> resume} -> 
            checkPermission user Read !get
            text = read i
            handle resume text with permissions user

        {write (i, text) -> resume} -> 
            checkPermission user Write !get
            write (i, text)
            handle resume () with permissions user
        
        {link (src, dest) -> resume} -> 
            checkPermission user Write !get
            link (src, dest)
            handle resume () with permissions user
        
        {unlink name -> resume} ->
            checkPermission user Write !get
            unlink name
            handle resume () with permissions user

        {create name -> resume} -> 
            checkPermission user Write !get
            ino = create name
            handle resume ino with permissions user

        {open name -> resume} ->
            checkPermission user Read !get
            ino = open name
            handle resume ino with permissions user

        {ufork -> resume} ->
            checkPermission user Execute !get
            let pid = ufork
                handle resume pid with permissions user

        {nice pid -> resume} ->
            checkPermission user Execute !get
            let nicevalue = nice pid
                handle resume nicevalue with permissions user

        {renice pid newnice -> resume} ->
            checkPermission user Execute !get
            renice pid newnice
            handle resume () with permissions user

        {wait pid -> resume} ->
            checkPermission user Execute !get
            wait pid
            handle resume () with permissions user

        {uinterrupt -> resume} ->
            checkPermission user Execute !get
            uinterrupt
            handle resume () with permissions user

        {result} -> result

lookupPermission: Text -> [(Text, [Permission])] -> [Permission]
lookupPermission var perms =
    match perms with
        [] -> []
        (var', perms') +: rest ->
            if var == var' then perms'
            else lookupPermission var rest

modifyPermission: Text -> [Permission] -> [(Text, [Permission])] -> [(Text, [Permission])]
modifyPermission var perms perms' =
    match perms' with
        [] -> [(var, perms)]
        (var', perms'') +: rest ->
            if var == var' then (var, perms) +: rest
            else (var', perms'') +: modifyPermission var perms rest

removePermission: Permission -> [Permission] -> [Permission]
removePermission perm perms =
    match perms with
        [] -> []
        perm' +: rest ->
            if permEquals perm perm' then rest
            else perm' +: removePermission perm rest

allowed: Permission -> [Permission] -> Boolean
allowed perm perms =
    match perms with
        [] -> false
        perm' +: rest ->
            if permEquals perm perm' then true
            else allowed perm rest

permEquals : Permission -> Permission -> Boolean
permEquals perms1 perms2 = 
    match perms1 with 
        Read -> 
            match perms2 with 
                Read -> true
                _ -> false
        Write -> 
            match perms2 with 
                Write -> true
                _ -> false
        AddUser -> 
            match perms2 with 
                AddUser -> true
                _ -> false
        Grant ->
            match perms2 with 
                Grant -> true
                _ -> false
        Revoke ->
            match perms2 with 
                Revoke -> true
                _ -> false
        Execute ->
            match perms2 with 
                Execute -> true
                _ -> false

initialPermissions : [(Text, [Permission])]
initialPermissions = [("root", all)]


{-
    Errors
-}

unique type EType = PermissionDenied | FileNotFound | FileExists | UserExists | NoSuchUser | UnknownError

toText: EType -> Text
toText = cases  
    PermissionDenied -> "Permission denied"
    FileNotFound -> "File not found"
    FileExists -> "File exists"
    UserExists -> "User exists"
    NoSuchUser -> "No such user"
    UnknownError -> "Unknown error"

unique ability Error
    where
        throw: EType -> ()

fail : Request {e, Error} a ->{e, IO, Exception, Status} Empty
fail request =
    match request with
        { throw err -> resume } -> 
            printLine (toText err)
            exit 1
        { result } -> exit 0

warn : Request {e, Error} a ->{e, IO, Exception} a
warn request =
    match request with
        { throw err -> resume } -> 
            printLine (toText err)
            handle resume () with warn
        { result } -> result

{-
    Retrofitting fork
-}

nondet2 : Request {TimeSharing} a -> [a]
nondet2 request =
    match request with
        { fork -> resume } -> 
            let pid = ufork
                handle resume (pid != 0) with nondet2
        { result } -> [result]

 {-
     Unix
    ======
-}

unix : '{e, BasicIO, FileRW, FileCO, FileLU, Error, Session, Permit, Co} a ->{e, IO, Exception} [(Nat, Nat)]
unix m = handle
            (handle 
                (handle
                    (handle
                        (handle
                        (handle
                            (handle 
                                (handle 
                                    (handle
                                        (handle 
                                            (handle
                                                (handle 
                                                    (handle
                                                        init m
                                                    with permissions (Username "root"))
                                                with runState initialPermissions)
                                            with env (Username "root")) 
                                        with runState initialUserspace)
                                    with fileCO)
                                with fileLU)
                        with fileRW)
                    with runState initialFileSystem)
                    with interruptWrite)
                with basicIO)
            with warn)
        with exitHandler)
    with scheduler (Sstate [] [] 1 2)

